
Discarded input sections

 .text          0x0000000000000000        0x0 build/asm/header.s.o
 .bss           0x0000000000000000        0x0 build/asm/header.s.o
 .reginfo       0x0000000000000000       0x18 build/asm/header.s.o
 .MIPS.abiflags
                0x0000000000000000       0x18 build/asm/header.s.o
 .pdr           0x0000000000000000        0x0 build/asm/header.s.o
 .gnu.attributes
                0x0000000000000000       0x10 build/asm/header.s.o
 .reginfo       0x0000000000000000       0x18 build/asm/1000.s.o
 .MIPS.abiflags
                0x0000000000000000       0x18 build/asm/1000.s.o
 .pdr           0x0000000000000000       0x20 build/asm/1000.s.o
 .gnu.attributes
                0x0000000000000000       0x10 build/asm/1000.s.o
 .reginfo       0x0000000000000000       0x18 build/asm/1080.s.o
 .MIPS.abiflags
                0x0000000000000000       0x18 build/asm/1080.s.o
 .pdr           0x0000000000000000       0x40 build/asm/1080.s.o
 .gnu.attributes
                0x0000000000000000       0x10 build/asm/1080.s.o
 .sbss          0x0000000000000000       0x44 build/src/main.c.o
 .note          0x0000000000000000       0x74 build/src/main.c.o
 .reginfo       0x0000000000000000       0x18 build/asm/2F000.s.o
 .MIPS.abiflags
                0x0000000000000000       0x18 build/asm/2F000.s.o
 .pdr           0x0000000000000000       0x20 build/asm/2F000.s.o
 .gnu.attributes
                0x0000000000000000       0x10 build/asm/2F000.s.o

Memory Configuration

Name             Origin             Length             Attributes
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD build/asm/header.s.o
LOAD build/assets/boot.bin.o
LOAD build/asm/1000.s.o
LOAD build/asm/1080.s.o
LOAD build/src/main.c.o
LOAD build/assets/39C0.bin.o
LOAD build/asm/2F000.s.o
LOAD build/assets/2F100.bin.o
                0x0000000000040000                __romPos = 0x0
                0x0000000000000000                _gp = 0x0
                0x0000000000000000                header_ROM_START = __romPos
                0x0000000000000000                header_VRAM = ADDR (.header)

.header         0x0000000000000000       0x40
                0x0000000000000000                header_DATA_START = .
                0x0000000000000000                header_s = .
 build/asm/header.s.o(.data)
 .data          0x0000000000000000       0x40 build/asm/header.s.o
                0x0000000000000040                header_DATA_END = .
                0x0000000000000040                header_DATA_SIZE = ABSOLUTE ((header_DATA_END - header_DATA_START))
                0x0000000000040000                __romPos = (__romPos + SIZEOF (.header))
                0x0000000000000040                header_ROM_END = __romPos
                0x0000000000000040                header_VRAM_END = .
                0x0000000000000040                boot_ROM_START = __romPos
                0x0000000000000040                boot_VRAM = ADDR (.boot)

.boot           0x0000000000000040      0xfc0
                0x0000000000000040                boot_DATA_START = .
                0x0000000000000040                boot_bin = .
 build/assets/boot.bin.o(.data)
 .data          0x0000000000000040      0xfc0 build/assets/boot.bin.o
                0x0000000000000040                _binary_assets_boot_bin_start
                0x0000000000001000                _binary_assets_boot_bin_end
                0x0000000000001000                boot_DATA_END = .
                0x0000000000000fc0                boot_DATA_SIZE = ABSOLUTE ((boot_DATA_END - boot_DATA_START))
                0x0000000000040000                __romPos = (__romPos + SIZEOF (.boot))
                0x0000000000001000                boot_ROM_END = __romPos
                0x0000000000001000                boot_VRAM_END = .
                0x0000000000001000                entry_ROM_START = __romPos
                0x0000000080200400                entry_VRAM = ADDR (.entry)

.entry          0x0000000080200400       0x80 load address 0x0000000000001000
                0x0000000080200400                entry_TEXT_START = .
 build/asm/1000.s.o(.text)
 .text          0x0000000080200400       0x80 build/asm/1000.s.o
                0x0000000080200400                func_80200400
                0x0000000080200480                entry_TEXT_END = .
                0x0000000000000080                entry_TEXT_SIZE = ABSOLUTE ((entry_TEXT_END - entry_TEXT_START))
                0x0000000080200480                entry_DATA_START = .
                0x0000000080200480                _1000_s = .
 build/asm/1000.s.o(.data)
 .data          0x0000000080200480        0x0 build/asm/1000.s.o
                0x0000000080200480                entry_DATA_END = .
                0x0000000000000000                entry_DATA_SIZE = ABSOLUTE ((entry_DATA_END - entry_DATA_START))
                0x0000000080200480                entry_RODATA_START = .
 build/asm/1000.s.o(.rodata)
                0x0000000080200480                entry_RODATA_END = .
                0x0000000000000000                entry_RODATA_SIZE = ABSOLUTE ((entry_RODATA_END - entry_RODATA_START))
                0x0000000080200480                entry_bss_VRAM = ADDR (.entry_bss)

.entry_bss      0x0000000080200480        0x0 load address 0x0000000000001080
                0x0000000080200480                entry_BSS_START = .
 build/asm/1000.s.o(.bss)
 .bss           0x0000000080200480        0x0 build/asm/1000.s.o
                0x0000000080200480                entry_BSS_END = .
                0x0000000000000000                entry_BSS_SIZE = ABSOLUTE ((entry_BSS_END - entry_BSS_START))
                0x0000000000040000                __romPos = (__romPos + SIZEOF (.entry))
                0x0000000000040000                __romPos = ALIGN (__romPos, 0x10)
                0x0000000000001080                entry_ROM_END = __romPos
                0x0000000080200480                entry_VRAM_END = .
                0x0000000000001080                loader_ROM_START = __romPos
                0x0000000080200480                loader_VRAM = ADDR (.loader)

.loader         0x0000000080200480      0x100 load address 0x0000000000001080
                0x0000000080200480                loader_TEXT_START = .
 build/asm/1080.s.o(.text)
 .text          0x0000000080200480      0x100 build/asm/1080.s.o
                0x0000000080200480                func_80200480
                0x00000000802004f4                func_802004F4
                0x0000000080200580                loader_TEXT_END = .
                0x0000000000000100                loader_TEXT_SIZE = ABSOLUTE ((loader_TEXT_END - loader_TEXT_START))
                0x0000000080200580                loader_DATA_START = .
                0x0000000080200580                _1080_s = .
 build/asm/1080.s.o(.data)
 .data          0x0000000080200580        0x0 build/asm/1080.s.o
                0x0000000080200580                loader_DATA_END = .
                0x0000000000000000                loader_DATA_SIZE = ABSOLUTE ((loader_DATA_END - loader_DATA_START))
                0x0000000080200580                loader_RODATA_START = .
 build/asm/1080.s.o(.rodata)
                0x0000000080200580                loader_RODATA_END = .
                0x0000000000000000                loader_RODATA_SIZE = ABSOLUTE ((loader_RODATA_END - loader_RODATA_START))
                0x0000000080200580                loader_bss_VRAM = ADDR (.loader_bss)

.loader_bss     0x0000000080200580        0x0 load address 0x0000000000001180
                0x0000000080200580                loader_BSS_START = .
 build/asm/1080.s.o(.bss)
 .bss           0x0000000080200580        0x0 build/asm/1080.s.o
                0x0000000080200580                loader_BSS_END = .
                0x0000000000000000                loader_BSS_SIZE = ABSOLUTE ((loader_BSS_END - loader_BSS_START))
                0x0000000000040000                __romPos = (__romPos + SIZEOF (.loader))
                0x0000000000040000                __romPos = ALIGN (__romPos, 0x10)
                0x0000000000001180                loader_ROM_END = __romPos
                0x0000000080200580                loader_VRAM_END = .
                0x0000000000001180                main_ROM_START = __romPos
                0x0000000080040180                main_VRAM = ADDR (.main)

.main           0x0000000080040180     0x2840 load address 0x0000000000001180
                0x0000000080040180                main_TEXT_START = .
 build/src/main.c.o(.text)
 .text          0x0000000080040180     0x2840 build/src/main.c.o
                0x0000000080040180                func_80040180
                0x0000000080040278                func_80040278
                0x00000000800402d8                func_800402D8
                0x000000008004043c                func_8004043C
                0x00000000800404fc                func_800404FC
                0x0000000080040560                wait_PI
                0x0000000080040580                func_80040580
                0x00000000800405bc                func_800405BC
                0x0000000080040600                func_80040600
                0x0000000080040648                func_80040648
                0x000000008004066c                func_8004066C
                0x00000000800406fc                func_800406FC
                0x00000000800407bc                func_800407BC
                0x00000000800407c0                func_800407C0
                0x00000000800407c8                func_800407C8
                0x0000000080040884                func_80040884
                0x00000000800408bc                func_800408BC
                0x0000000080040918                func_80040918
                0x000000008004096c                func_8004096C
                0x0000000080040b6c                func_80040B6C
                0x0000000080040d1c                func_80040D1C
                0x0000000080040dfc                func_80040DFC
                0x0000000080040f3c                func_80040F3C
                0x0000000080040f90                func_80040F90
                0x0000000080041148                func_80041148
                0x00000000800412dc                func_800412DC
                0x000000008004132c                func_8004132C
                0x000000008004137c                func_8004137C
                0x00000000800413cc                func_800413CC
                0x0000000080041418                func_80041418
                0x000000008004160c                func_8004160C
                0x00000000800417e0                func_800417E0
                0x0000000080041c58                func_80041C58
                0x0000000080041fcc                func_80041FCC
                0x0000000080042060                func_80042060
                0x0000000080042088                func_80042088
                0x0000000080042098                func_80042098
                0x00000000800420a4                func_800420A4
                0x00000000800420b0                func_800420B0
                0x00000000800420f0                func_800420F0
                0x0000000080042100                func_80042100
                0x0000000080042178                func_80042178
                0x000000008004224c                func_8004224C
                0x00000000800422bc                func_800422BC
                0x00000000800422c0                func_800422C0
                0x000000008004231c                func_8004231C
                0x0000000080042380                func_80042380
                0x00000000800423c8                func_800423C8
                0x0000000080042410                waitPIReserved
                0x000000008004242c                readPIRam
                0x0000000080042454                writePIRam
                0x0000000080042488                pifUnlock
                0x00000000800424b8                func_800424B8
                0x00000000800424c0                func_800424C0
                0x0000000080042504                func_80042504
                0x000000008004252c                func_8004252C
                0x0000000080042584                func_80042584
                0x0000000080042628                func_80042628
                0x0000000080042644                func_80042644
                0x000000008004264c                func_8004264C
                0x000000008004267c                func_8004267C
                0x0000000080042694                func_80042694
                0x00000000800426d4                func_800426D4
                0x00000000800426f8                func_800426F8
                0x0000000080042714                func_80042714
                0x00000000800427a4                func_800427A4
                0x00000000800427e0                func_800427E0
                0x000000008004281c                func_8004281C
                0x0000000080042858                func_80042858
                0x00000000800428e4                func_800428E4
                0x0000000080042928                func_80042928
                0x00000000800429c0                main_TEXT_END = .
                0x0000000000002840                main_TEXT_SIZE = ABSOLUTE ((main_TEXT_END - main_TEXT_START))
                0x00000000800429c0                main_DATA_START = .
                0x00000000800429c0                main_c = .
 build/src/main.c.o(.data)
                0x00000000800429c0                main_DATA_END = .
                0x0000000000000000                main_DATA_SIZE = ABSOLUTE ((main_DATA_END - main_DATA_START))
                0x00000000800429c0                main_RODATA_START = .
 build/src/main.c.o(.rodata)
                0x00000000800429c0                main_RODATA_END = .
                0x0000000000000000                main_RODATA_SIZE = ABSOLUTE ((main_RODATA_END - main_RODATA_START))
                0x00000000800429c0                main_bss_VRAM = ADDR (.main_bss)

.main_bss       0x00000000800429c0        0x0
                0x00000000800429c0                main_BSS_START = .
 build/src/main.c.o(.bss)
                0x00000000800429c0                main_BSS_END = .
                0x0000000000000000                main_BSS_SIZE = ABSOLUTE ((main_BSS_END - main_BSS_START))
                0x0000000000040000                __romPos = (__romPos + SIZEOF (.main))
                0x0000000000040000                __romPos = ALIGN (__romPos, 0x10)
                0x00000000000039c0                main_ROM_END = __romPos
                0x00000000800429c0                main_VRAM_END = .
                0x00000000000039c0                data_ROM_START = __romPos
                0x00000000800429c0                data_VRAM = ADDR (.data)

.data           0x00000000800429c0    0x3c640 load address 0x00000000000039c0
                0x00000000800429c0                data_DATA_START = .
                0x00000000800429c0                _39C0_bin = .
 build/assets/39C0.bin.o(.data)
 .data          0x00000000800429c0    0x2b640 build/assets/39C0.bin.o
                0x00000000800429c0                _binary_assets_39C0_bin_start
                0x000000008006e000                _binary_assets_39C0_bin_end
                0x000000008006e000                data_TEXT_START = .
 build/asm/2F000.s.o(.text)
 .text          0x000000008006e000      0x100 build/asm/2F000.s.o
                0x000000008006e000                func_8006E000
                0x000000008006e100                data_TEXT_END = .
                0x0000000000000100                data_TEXT_SIZE = ABSOLUTE ((data_TEXT_END - data_TEXT_START))
                0x000000008006e100                _2F100_bin = .
 build/assets/2F100.bin.o(.data)
 .data          0x000000008006e100    0x10f00 build/assets/2F100.bin.o
                0x000000008006e100                _binary_assets_2F100_bin_start
                0x000000008007f000                _binary_assets_2F100_bin_end
                0x000000008007f000                _2F000_s = .
 build/asm/2F000.s.o(.data)
 .data          0x000000008007f000        0x0 build/asm/2F000.s.o
                0x000000008007f000                data_DATA_END = .
                0x000000000003c640                data_DATA_SIZE = ABSOLUTE ((data_DATA_END - data_DATA_START))
                0x000000008007f000                data_RODATA_START = .
 build/asm/2F000.s.o(.rodata)
                0x000000008007f000                data_RODATA_END = .
                0x0000000000000000                data_RODATA_SIZE = ABSOLUTE ((data_RODATA_END - data_RODATA_START))
                0x000000008007f000                data_bss_VRAM = ADDR (.data_bss)

.data_bss       0x000000008007f000        0x0 load address 0x0000000000040000
                0x000000008007f000                data_BSS_START = .
 build/asm/2F000.s.o(.bss)
 .bss           0x000000008007f000        0x0 build/asm/2F000.s.o
                0x000000008007f000                data_BSS_END = .
                0x0000000000000000                data_BSS_SIZE = ABSOLUTE ((data_BSS_END - data_BSS_START))
                0x0000000000040000                __romPos = (__romPos + SIZEOF (.data))
                0x0000000000040000                __romPos = ALIGN (__romPos, 0x10)
                0x0000000000040000                data_ROM_END = __romPos
                0x000000008007f000                data_VRAM_END = .

/DISCARD/
 *(*)
                0x0000000080003000                D_80003000 = 0x80003000
                0x0000000080006000                D_80006000 = 0x80006000
                0x0000000080040000                D_80040000 = 0x80040000
                0x0000000080040004                D_80040004 = 0x80040004
                0x00000000800423ac                D_800423AC = 0x800423ac
                0x00000000800423f4                D_800423F4 = 0x800423f4
                0x00000000800429c0                D_800429C0 = 0x800429c0
                0x00000000800429cc                D_800429CC = 0x800429cc
                0x00000000800429d8                D_800429D8 = 0x800429d8
                0x00000000800429e4                D_800429E4 = 0x800429e4
                0x00000000800429f0                D_800429F0 = 0x800429f0
                0x0000000080042a00                D_80042A00 = 0x80042a00
                0x0000000080042a20                D_80042A20 = 0x80042a20
                0x0000000080042a30                D_80042A30 = 0x80042a30
                0x0000000080042a34                D_80042A34 = 0x80042a34
                0x0000000080042a40                D_80042A40 = 0x80042a40
                0x0000000080042a44                D_80042A44 = 0x80042a44
                0x0000000080042a48                D_80042A48 = 0x80042a48
                0x0000000080042a4c                D_80042A4C = 0x80042a4c
                0x0000000080042a50                D_80042A50 = 0x80042a50
                0x0000000080042a54                D_80042A54 = 0x80042a54
                0x0000000080042a58                D_80042A58 = 0x80042a58
                0x0000000080042a5c                D_80042A5C = 0x80042a5c
                0x0000000080042a60                D_80042A60 = 0x80042a60
                0x0000000080042a64                D_80042A64 = 0x80042a64
                0x0000000080042a68                D_80042A68 = 0x80042a68
                0x0000000080042a6c                D_80042A6C = 0x80042a6c
                0x0000000080042a70                D_80042A70 = 0x80042a70
                0x0000000080042a74                D_80042A74 = 0x80042a74
                0x0000000080042a78                D_80042A78 = 0x80042a78
                0x0000000080042a7c                D_80042A7C = 0x80042a7c
                0x0000000080042a80                D_80042A80 = 0x80042a80
                0x0000000080042a84                D_80042A84 = 0x80042a84
                0x0000000080042a88                D_80042A88 = 0x80042a88
                0x0000000080042a8c                D_80042A8C = 0x80042a8c
                0x0000000080042a90                D_80042A90 = 0x80042a90
                0x0000000080042aa0                D_80042AA0 = 0x80042aa0
                0x0000000080042aa4                D_80042AA4 = 0x80042aa4
                0x0000000080042ab0                D_80042AB0 = 0x80042ab0
                0x0000000080042ab4                D_80042AB4 = 0x80042ab4
                0x0000000080042ab8                D_80042AB8 = 0x80042ab8
                0x0000000080042abc                D_80042ABC = 0x80042abc
                0x0000000080042ac0                D_80042AC0 = 0x80042ac0
                0x0000000080042ac4                D_80042AC4 = 0x80042ac4
                0x0000000080042ac8                D_80042AC8 = 0x80042ac8
                0x0000000080042ad0                D_80042AD0 = 0x80042ad0
                0x0000000080042b10                D_80042B10 = 0x80042b10
                0x0000000080042b14                D_80042B14 = 0x80042b14
                0x0000000080042b20                D_80042B20 = 0x80042b20
                0x0000000080210000                D_80210000 = 0x80210000
                0x0000000080280000                D_80280000 = 0x80280000
                0x0000000080280001                D_80280001 = 0x80280001
                0x0000000080280002                D_80280002 = 0x80280002
                0x0000000080300000                D_80300000 = 0x80300000
                0x0000000080300002                D_80300002 = 0x80300002
                0x0000000080300004                D_80300004 = 0x80300004
                0x0000000080300280                D_80300280 = 0x80300280
                0x00000000b2c00000                D_B2C00000 = 0xb2c00000
                0x00000000be5ffffc                D_BE5FFFFC = 0xbe5ffffc
                0x00000000a4400000                VI_STATUS_REG = 0xa4400000
                0x00000000a4400004                VI_DRAM_ADDR_REG = 0xa4400004
                0x00000000a4400008                VI_WIDTH_REG = 0xa4400008
                0x00000000a4400010                VI_CURRENT_REG = 0xa4400010
                0x00000000a4400014                VI_BURST_REG = 0xa4400014
                0x00000000a4400018                VI_V_SYNC_REG = 0xa4400018
                0x00000000a440001c                VI_H_SYNC_REG = 0xa440001c
                0x00000000a4400020                VI_LEAP_REG = 0xa4400020
                0x00000000a4400024                VI_H_START_REG = 0xa4400024
                0x00000000a4400028                VI_V_START_REG = 0xa4400028
                0x00000000a440002c                VI_V_BURST_REG = 0xa440002c
                0x00000000a4400030                VI_X_SCALE_REG = 0xa4400030
                0x00000000a4400034                VI_Y_SCALE_REG = 0xa4400034
                0x00000000a4600010                PI_STATUS_REG = 0xa4600010
                0x00000000a4800014                SI_BASE14_REG = 0xa4800014
OUTPUT(build/gameshark.elf elf32-tradbigmips)
